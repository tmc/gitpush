// Code generated by entc, DO NOT EDIT.

package widget

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the widget type in the database.
	Label = "widget"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldTestField holds the string denoting the test_field field in the database.
	FieldTestField = "test_field"
	// EdgeType holds the string denoting the type edge name in mutations.
	EdgeType = "type"
	// Table holds the table name of the widget in the database.
	Table = "widgets"
	// TypeTable is the table that holds the type relation/edge.
	TypeTable = "widgets"
	// TypeInverseTable is the table name for the WidgetType entity.
	// It exists in this package in order to avoid circular dependency with the "widgettype" package.
	TypeInverseTable = "widget_types"
	// TypeColumn is the table column denoting the type relation/edge.
	TypeColumn = "widget_type"
)

// Columns holds all SQL columns for widget fields.
var Columns = []string{
	FieldID,
	FieldNote,
	FieldCreatedAt,
	FieldStatus,
	FieldPriority,
	FieldTestField,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "widgets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"widget_type",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NoteValidator is a validator for the "note" field. It is called by the builders before save.
	NoteValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultPriority holds the default value on creation for the "priority" field.
	DefaultPriority int
)

// Status defines the type for the "status" enum field.
type Status string

// StatusDraft is the default value of the Status enum.
const DefaultStatus = StatusDraft

// Status values.
const (
	StatusDraft     Status = "draft"
	StatusCompleted Status = "completed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDraft, StatusCompleted:
		return nil
	default:
		return fmt.Errorf("widget: invalid enum value for status field: %q", s)
	}
}
