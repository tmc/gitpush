// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tmc/moderncrud/ent/widget"
	"github.com/tmc/moderncrud/ent/widgettype"
)

// WidgetCreate is the builder for creating a Widget entity.
type WidgetCreate struct {
	config
	mutation *WidgetMutation
	hooks    []Hook
}

// SetNote sets the "note" field.
func (wc *WidgetCreate) SetNote(s string) *WidgetCreate {
	wc.mutation.SetNote(s)
	return wc
}

// SetCreatedAt sets the "created_at" field.
func (wc *WidgetCreate) SetCreatedAt(t time.Time) *WidgetCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WidgetCreate) SetNillableCreatedAt(t *time.Time) *WidgetCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetStatus sets the "status" field.
func (wc *WidgetCreate) SetStatus(w widget.Status) *WidgetCreate {
	wc.mutation.SetStatus(w)
	return wc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wc *WidgetCreate) SetNillableStatus(w *widget.Status) *WidgetCreate {
	if w != nil {
		wc.SetStatus(*w)
	}
	return wc
}

// SetPriority sets the "priority" field.
func (wc *WidgetCreate) SetPriority(i int) *WidgetCreate {
	wc.mutation.SetPriority(i)
	return wc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (wc *WidgetCreate) SetNillablePriority(i *int) *WidgetCreate {
	if i != nil {
		wc.SetPriority(*i)
	}
	return wc
}

// SetTestField sets the "test_field" field.
func (wc *WidgetCreate) SetTestField(s string) *WidgetCreate {
	wc.mutation.SetTestField(s)
	return wc
}

// SetTypeID sets the "type" edge to the WidgetType entity by ID.
func (wc *WidgetCreate) SetTypeID(id int) *WidgetCreate {
	wc.mutation.SetTypeID(id)
	return wc
}

// SetNillableTypeID sets the "type" edge to the WidgetType entity by ID if the given value is not nil.
func (wc *WidgetCreate) SetNillableTypeID(id *int) *WidgetCreate {
	if id != nil {
		wc = wc.SetTypeID(*id)
	}
	return wc
}

// SetType sets the "type" edge to the WidgetType entity.
func (wc *WidgetCreate) SetType(w *WidgetType) *WidgetCreate {
	return wc.SetTypeID(w.ID)
}

// Mutation returns the WidgetMutation object of the builder.
func (wc *WidgetCreate) Mutation() *WidgetMutation {
	return wc.mutation
}

// Save creates the Widget in the database.
func (wc *WidgetCreate) Save(ctx context.Context) (*Widget, error) {
	var (
		err  error
		node *Widget
	)
	wc.defaults()
	if len(wc.hooks) == 0 {
		if err = wc.check(); err != nil {
			return nil, err
		}
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WidgetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wc.check(); err != nil {
				return nil, err
			}
			wc.mutation = mutation
			if node, err = wc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			if wc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WidgetCreate) SaveX(ctx context.Context) *Widget {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WidgetCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WidgetCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WidgetCreate) defaults() {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		v := widget.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.Status(); !ok {
		v := widget.DefaultStatus
		wc.mutation.SetStatus(v)
	}
	if _, ok := wc.mutation.Priority(); !ok {
		v := widget.DefaultPriority
		wc.mutation.SetPriority(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WidgetCreate) check() error {
	if _, ok := wc.mutation.Note(); !ok {
		return &ValidationError{Name: "note", err: errors.New(`ent: missing required field "note"`)}
	}
	if v, ok := wc.mutation.Note(); ok {
		if err := widget.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "note": %w`, err)}
		}
	}
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := wc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if v, ok := wc.mutation.Status(); ok {
		if err := widget.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "status": %w`, err)}
		}
	}
	if _, ok := wc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "priority"`)}
	}
	if _, ok := wc.mutation.TestField(); !ok {
		return &ValidationError{Name: "test_field", err: errors.New(`ent: missing required field "test_field"`)}
	}
	return nil
}

func (wc *WidgetCreate) sqlSave(ctx context.Context) (*Widget, error) {
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wc *WidgetCreate) createSpec() (*Widget, *sqlgraph.CreateSpec) {
	var (
		_node = &Widget{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: widget.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: widget.FieldID,
			},
		}
	)
	if value, ok := wc.mutation.Note(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: widget.FieldNote,
		})
		_node.Note = value
	}
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: widget.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: widget.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := wc.mutation.Priority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: widget.FieldPriority,
		})
		_node.Priority = value
	}
	if value, ok := wc.mutation.TestField(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: widget.FieldTestField,
		})
		_node.TestField = value
	}
	if nodes := wc.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   widget.TypeTable,
			Columns: []string{widget.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: widgettype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.widget_type = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WidgetCreateBulk is the builder for creating many Widget entities in bulk.
type WidgetCreateBulk struct {
	config
	builders []*WidgetCreate
}

// Save creates the Widget entities in the database.
func (wcb *WidgetCreateBulk) Save(ctx context.Context) ([]*Widget, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Widget, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WidgetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WidgetCreateBulk) SaveX(ctx context.Context) []*Widget {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WidgetCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WidgetCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
