// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/tmc/moderncrud/ent/widget"
	"github.com/tmc/moderncrud/ent/widgettype"
)

// Widget is the model entity for the Widget schema.
type Widget struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Status holds the value of the "status" field.
	Status widget.Status `json:"status,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int `json:"priority,omitempty"`
	// TestField holds the value of the "test_field" field.
	TestField string `json:"test_field,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WidgetQuery when eager-loading is set.
	Edges       WidgetEdges `json:"edges"`
	widget_type *int
}

// WidgetEdges holds the relations/edges for other nodes in the graph.
type WidgetEdges struct {
	// Type holds the value of the type edge.
	Type *WidgetType `json:"type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TypeOrErr returns the Type value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WidgetEdges) TypeOrErr() (*WidgetType, error) {
	if e.loadedTypes[0] {
		if e.Type == nil {
			// The edge type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: widgettype.Label}
		}
		return e.Type, nil
	}
	return nil, &NotLoadedError{edge: "type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Widget) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case widget.FieldID, widget.FieldPriority:
			values[i] = new(sql.NullInt64)
		case widget.FieldNote, widget.FieldStatus, widget.FieldTestField:
			values[i] = new(sql.NullString)
		case widget.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case widget.ForeignKeys[0]: // widget_type
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Widget", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Widget fields.
func (w *Widget) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case widget.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case widget.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				w.Note = value.String
			}
		case widget.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case widget.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				w.Status = widget.Status(value.String)
			}
		case widget.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				w.Priority = int(value.Int64)
			}
		case widget.FieldTestField:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test_field", values[i])
			} else if value.Valid {
				w.TestField = value.String
			}
		case widget.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field widget_type", value)
			} else if value.Valid {
				w.widget_type = new(int)
				*w.widget_type = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryType queries the "type" edge of the Widget entity.
func (w *Widget) QueryType() *WidgetTypeQuery {
	return (&WidgetClient{config: w.config}).QueryType(w)
}

// Update returns a builder for updating this Widget.
// Note that you need to call Widget.Unwrap() before calling this method if this Widget
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Widget) Update() *WidgetUpdateOne {
	return (&WidgetClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the Widget entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Widget) Unwrap() *Widget {
	tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Widget is not a transactional entity")
	}
	w.config.driver = tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Widget) String() string {
	var builder strings.Builder
	builder.WriteString("Widget(")
	builder.WriteString(fmt.Sprintf("id=%v", w.ID))
	builder.WriteString(", note=")
	builder.WriteString(w.Note)
	builder.WriteString(", created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", w.Status))
	builder.WriteString(", priority=")
	builder.WriteString(fmt.Sprintf("%v", w.Priority))
	builder.WriteString(", test_field=")
	builder.WriteString(w.TestField)
	builder.WriteByte(')')
	return builder.String()
}

// Widgets is a parsable slice of Widget.
type Widgets []*Widget

func (w Widgets) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
